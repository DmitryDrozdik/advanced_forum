<?php

/**
 * Called from _phptemplate_variables, this function 
 * looks at whether we are on a forum post/comment and 
 * adds variables to the $vars array that will be available
 * to node-forum.tpl.php.
 */ 

function advanced_forum_addvars($hook, $vars) {
  // Comment numbering
  static $post_number;
  static $page_number;
  static $nid;
  
  if (_is_forum()) {
    advanced_forum_add_css();   
         
    $posts_per_page = variable_get('comment_default_per_page', 50);
    $post_number = ($_GET['page'] * $posts_per_page) -1;
    $page_number = ($post_number + 1) / $posts_per_page;
    $nid = arg(1);
    
    if ($hook == 'node') {
      // Variables for just the main post
      $vars['top_post'] = TRUE;
      $vars['title'] = empty($vars['title']) ? '&nbsp' : $vars['title'];
      $vars['content'] = $vars['node']->body;
      $vars['userid'] = $vars['node']->uid;
        
      // Comment numbering
      $post_number++;
      $fragment = NULL;
    }
    if ($hook == 'comment') {
      // Variables for comments
      $vars['template_file'] = 'node-forum'; // Sends comments to the same .tpl as forum posts
      $vars['top_post'] = FALSE;
      $vars['title'] = $vars['comment']->subject;
      $vars['content'] = $vars['comment']->comment;
      
      $vars['userid'] = $vars['comment']->uid;
      $vars['name'] = $vars['author'];
      $vars['submitted'] = format_date($vars['comment']->timestamp);
      $subject = check_plain($vars['comment']->subject);
      
      // if comment subjects are disabled, don't display them
      if (variable_get('comment_subject_field', 1) == 0) {
        $vars['title'] = '';
      }

      // Comment numbering
      $post_number++;
      $fragment = 'comment-' . $vars['comment']->cid;

   }
    
    // These variables are common to nodes and comments
    $vars['is_forum'] = TRUE;
    $vars['row_class'] = _row_class();
    $vars['links'] = empty($vars['links']) ? '&nbsp' : $vars['links'];

    // Load the poster's account to use in gathering author info
    $account = user_load(array('uid'=>$vars['userid']));

    // The date the poster joined the site
    $vars['joined'] = format_date($account->created, 'custom', 'Y-m-d');

     if (round((time()-$account->access)/60) < 30) {
     
       $vars['online_icon'] = theme_image($advforum_path . '/images/status_online.png', $alt = 'User is online', $title = 'User is online', $attributes = NULL, $getsize = TRUE);
     } else {
       $vars['online_icon'] = theme_image($advforum_path . '/images/status_offline.png', $alt = 'User is offline', $title = 'User is offline', $attributes = NULL, $getsize = TRUE);
     }

 
 
    // Comment number with link
    $query = ($page_number) ? 'page=' . $page_number : NULL;
    $vars['comment_link'] = l('#' . $post_number, 'node/' . $nid, NULL, $query, $fragment, TRUE, NULL);

    // Add in any extra variables provided by other modules
    $vars = advanced_forum_extravars($vars, $vars['userid']);

  } else {
    if (arg(0) == 'forum') {
      // If we are in the forum listing, add our CSS
      advanced_forum_add_css();   
    }
  }
  
  // If we're not in a forum, this will just return the existing vars
  return $vars;
}

/**
 * This function creates variables from functions
 * provided by other modules related to forums.
 */
function advanced_forum_extravars($vars, $authorid) {
  if (module_exists('userpoints')) {
    $vars['points'] = userpoints_get_current_points($authorid);
  }

  if (module_exists('user_postcounts')) {
    $vars['posts'] = user_postcounts_get_postcount($authorid);
  }
 
  if (module_exists('user_titles')) {
    $vars['user_title'] = user_titles_get_user_title($authorid);
  }
  
  // Calls to other modules can be added here

  return $vars;
}

/**
 * This handles labeling each post/comment as odd or even
 * to aid in design. Making the variable static means
 * it keeps track of the last value so each call sets it 
 * to the opposite value.
 */
function _row_class() {
  static $forum_row = TRUE;
  $forum_row = !$forum_row;
  return $forum_row ? 'odd' : 'even';
}

/**
 * This function returns true if we are in the forums
 */
function _is_forum() {
  // Setting this static means it only needs to be done once per thread
  static $is_forum;
  
  // We only need to do all this the first time this function is called per thread
  if (!isset($is_forum)) {
    if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '') {
      // This means the internal path is in the form of node/XX  
      // where XX is the ID of the node we are lookng at 
      $nid = arg(1);
    }
    if (arg(0) == 'comment' && arg(1) == 'reply' && is_numeric(arg(2))) {
      // This means the internal path is in the form of comment/reply/XX
      // where XX is the ID of the node we are lookng at 
      $nid = arg(2);
    }
    if ($nid) {
      // If one of the two paths above were found, then we have the node ID
      // We load the node here so we 
      $node = node_load(array('nid' => $nid));
    }
    // Set the variable to true if the node type is a forum
    // D6 ALERT: We can't rely on type in D6
    $is_forum = ($node && $node->type == 'forum');
    
  }
  
  return $is_forum;
}

function advanced_forum_add_css() {
//MAC NOTE: add check in here to see if the file exists in the current theme to allow easy overriding
  $advforum_path = drupal_get_path('module', 'advanced_forum');
  drupal_add_css($advforum_path . '/advanced_forum.css');  
}

/*********************************** FORUM MODULE THEME OVERRIDES *************************************/


/**
  * Captures the forum list and passes control to forum-list.tpl.php.
  * The variables, $forums, $parents and $tid will be available in forum-list.tpl.php
  */
function phptemplate_forum_list($forums, $parents, $tid) {
   return _phptemplate_callback('forum-list', array('forums' => $forums, 'parents' => $parents, 'tid' => $tid));   
}

function phptemplate_forum_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page) {
   return _phptemplate_callback('forum-display', array('forums' => $forums, 'topics' => $topics, 'parents' => $parents, 'tid' => $tid, 'sortby' => $sortby, 'forum_per_page' => $forum_per_page));   
}

function phptemplate_forum_topic_list($tid, $topics, $sortby, $forum_per_page) {
   return _phptemplate_callback('forum-topics', array('tid' => $tid, 'topics' => $topics, 'sortby' => $sortby, 'forum_per_page' => $forum_per_page));   
}

/**
 * Removes post title navigation from forum posts.
 */
function phptemplate_forum_topic_navigation($node){
  return ;
}



/**
 * Format the icon for each individual topic.
 *
 * @ingroup themeable
 */
function phptemplate_forum_icon($new_posts, $num_posts = 0, $comment_mode = 0, $sticky = 0) {
  $icon_path = drupal_get_path('module', 'advanced_forum') . "/images";
  
  if ($num_posts > variable_get('forum_hot_topic', 15)) {
    $icon = $new_posts ? 'hot-new' : 'hot';
  }
  else {
    $icon = $new_posts ? 'new' : 'default';
  }

  if ($comment_mode == COMMENT_NODE_READ_ONLY || $comment_mode == COMMENT_NODE_DISABLED) {
    $icon = 'closed';
  }

  if ($sticky == 1) {
    $icon = 'sticky';
  }

  $output = theme('image', "$icon_path/forum-$icon.png");

  if ($new_posts) {
    $output = "<a name=\"new\">$output</a>";
  }

  return $output;
}


