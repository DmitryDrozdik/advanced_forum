<?php

/**
 * Called from _phptemplate_variables, this function 
 * looks at whether we are on a forum post/comment and 
 * adds variables to the $vars array that will be available
 * to node-forum.tpl.php.
 */ 

function advanced_forum_addvars($hook, $vars) {
  if (!_is_forum($hook,$vars)) {
    // We either aren't on a forum thread or that thread is
    // being shown outside the forums so just send back the 
    // $vars as is because we have no jurisdiction here.
    return $vars;
  }
  
  $forum_theme = advanced_forum_get_forum_theme_directory(); 
  $advforum_path = drupal_get_path('module', 'advanced_forum');
  
  advanced_forum_add_css($forum_theme);   
  
  // Comment numbering
  static $post_number = 0;
  static $nid;

  $post_per_page = _comment_get_display_setting('comments_per_page');
  $page_number = $_GET['page'];
  
  if ( ! $page_number ) {
    $page_number = 0;
  }
    
  $nid = arg(1);
    
  if ($hook == 'node') {
    // Variables for just the main post
    $vars['template_file'] = "$forum_theme/forum-thread";  
    $vars['top_post'] = TRUE;
    $vars['content'] = $vars['node']->body;
    $vars['userid'] = $vars['node']->uid;
      
    // Comment numbering
    $fragment = NULL;
  }
    
  if ($hook == 'comment') {
    // Variables for comments
    $vars['template_file'] = "$forum_theme/forum-thread"; 
    $vars['top_post'] = FALSE;
    $vars['title'] = check_plain($vars['comment']->subject);
    $vars['content'] = $vars['comment']->comment;
      
    $vars['userid'] = $vars['comment']->uid;
    $vars['name'] = $vars['author'];
    $vars['submitted'] = format_date($vars['comment']->timestamp);
      
    // if comment titles are disabled, don't display them
    if (variable_get('comment_subject_field', 1) == 0) {
      $vars['title'] = '';
    }

    // Comment numbering
    $post_number++;
    $fragment = 'comment-' . $vars['comment']->cid;

  }
    
  // These variables are common to nodes and comments
  $vars['is_forum'] = TRUE;
  $vars['row_class'] = _row_class();

  // Comment number with link
  $query = ($page_number) ? 'page=' . $page_number : NULL;
  $vars['comment_link'] = l('#' . (($page_number * $post_per_page) + $post_number), 'node/' . $nid, NULL, $query, $fragment, TRUE, NULL);

  // Add in user status vars
  $vars = advanced_forum_uservars($vars, $vars['userid']);
  
  // Send back the modified vars
  return $vars;
}

/**
 * This function creates variables related to the author of
 * the post, mostly from functions provided by other modules.
 */
function advanced_forum_uservars($vars, $authorid) {
  global $user;
  
  $themedir = advanced_forum_get_forum_theme_directory(); 

  // Load the poster's account to use in gathering author info
  $author = user_load(array('uid'=>$authorid));

  // The date the poster joined the site
  $vars['joined'] = format_date($author->created, 'custom', 'Y-m-d');

  if (round((time()-$author->access)/60) < 30) {
    $vars['online_icon'] = 
     $vars['online_status'] = 'Online';
     theme_image(path_to_theme() . '/' . $themedir . 
                  '/images/status_online.png', 'User is online', 'User is online', NULL, TRUE);
   } else {
    $vars['online_status'] = 'Offline';
    $vars['online_icon'] = 
       theme_image(path_to_theme() . '/' . $themedir . 
                   '/images/status_offline.png', 'User is offline', 'User is offline',NULL, TRUE);
   }

  if (module_exists('userpoints')) {
    $vars['points'] = userpoints_get_current_points($authorid);
  }

  if (module_exists('user_postcounts')) {
    $vars['posts'] = user_postcounts_get_postcount($authorid);
  }
 
  if (module_exists('user_titles')) {
    $vars['user_title'] = user_titles_get_user_title($authorid);
  }

  if (module_exists('user_badges')) {
    $vars['user_badges'] = user_badges_for_uid($authorid);
  }


  // Email user
  if ($author->contact) { 
    if ($user->uid != 0) {
      $vars['email_icon'] = 
        l(theme_image(path_to_theme() . $themedir . 
            "/images/email.png", 'Email', 'Email', NULL, TRUE), 
            'user/'. $authorid . '/contact',NULL,NULL,NULL,NULL,TRUE); 
    }
  } 
           
  // Send private message
  if (module_exists('privatemsg') &&
      user_access('access private messages') && 
      (isset($author->privatemsg_allow) ? $profileuser->privatemsg_allow : 1)) { 
    $vars['privatemsg_icon'] =
      l(' ' .theme_image(path_to_theme() . $themedir . 
           "/images/user_comment.png", 'Private Message', 'Private Message', NULL, TRUE), 
           'privatemsg/new/'. $authorid,NULL,NULL,NULL,NULL,TRUE); 
  } 
            
  // Add / remove from buddylist
  if (module_exists('buddylist')) {
    if (@in_array($authorid, array_keys(buddylist_get_buddies($user->uid))) && 
      user_access('maintain buddy list')) {
      $vars['buddylist_icon'] = l(' ' .theme_image(path_to_theme() . $themedir . 
            "/images/group_delete.png", 'Remove Buddy', 'Remove Buddy', NULL, TRUE), 
            'buddy/delete/'. $authorid,NULL,NULL,NULL,NULL,TRUE);
    } else {
      if ($authorid != $user->uid && user_access('maintain buddy list')) {
        $vars['buddylist_icon'] = l(' ' .theme_image(path_to_theme() . $themedir . 
              "/images/group_add.png", 'Add to buddy list', 'Add to buddy list', NULL, TRUE), 
              'buddy/add/'. $authorid,NULL,NULL,NULL,NULL,TRUE);
      }
    }
  }
 
  return $vars;
}

/**
 * This handles labeling each post/comment as odd or even
 * to aid in design. Making the variable static means
 * it keeps track of the last value so each call sets it 
 * to the opposite value.
 */
function _row_class() {
  static $forum_row = TRUE;
  $forum_row = !$forum_row;
  return $forum_row ? 'odd' : 'even';
}

/**
 * This function returns true if we are in the forums
 */
function _is_forum($hook, $vars) {
  // Setting this static means the check only needs to be done once per page
  // as long as we haven't hit a non forum node on the page
  static $forum_node_id;
  
  switch ($hook) {
    case 'node':
      // Make sure this is a forum node type and that it's not being
      // shown on some other page (like a view or promoted to front page)
      if (($vars['node']->type == 'forum') && arg(0) == 'node' && is_numeric(arg(1))) {
        $forum_node_id = $vars['node']->nid;
        return true;
      } else {
        // In D5, only forum types allowed in the forums so
        // we know this isn't a forum thread (or that it's not in the forums).
        // Will need to revisit in D6.
        unset($forum_node_id);
        return false;
      }
      
    case 'comment':
      if (isset($forum_node_id)) {
        // We already know the node ID of the forum
        // thread on this page, we just need to see
        // if this comment goes with it.
        return $vars['comment']->nid == $forum_node_id;
      } else {
        return false;
      }
    
    default:
      // 
      return false;
  }  
}

function advanced_forum_add_css($forum_theme) {

  // Find the path to the current theme
  $theme_path = path_to_theme();
  
  // Load the structural CSS (heights, floats, padding, margins, etc)
  drupal_add_css(path_to_theme() . '/' . $forum_theme . '/advanced_forum-structure.css');
  
  // Add on the colors and graphics part
  drupal_add_css(path_to_theme() . '/' . $forum_theme . '/advanced_forum.css');
}

function advanced_forum_get_forum_theme_directory() {
  return 'advforum';
}

/*********************************** FORUM MODULE THEME OVERRIDES *************************************/


/**
  * Captures the forum list and passes control to forum-list.tpl.php.
  * The variables, $forums, $parents and $tid will be available in forum-list.tpl.php
  */
function phptemplate_forum_list($forums, $parents, $tid) {
   $forum_theme = advanced_forum_get_forum_theme_directory();
   advanced_forum_add_css($forum_theme);  
   return _phptemplate_callback("$forum_theme/forum-list", array('forums' => $forums, 'parents' => $parents, 'tid' => $tid));   
}

function phptemplate_forum_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page) {
   $forum_theme = advanced_forum_get_forum_theme_directory();
   advanced_forum_add_css($forum_theme);  
   return _phptemplate_callback("$forum_theme/forum-display", array('forums' => $forums, 'topics' => $topics, 'parents' => $parents, 'tid' => $tid, 'sortby' => $sortby, 'forum_per_page' => $forum_per_page));   
}

function phptemplate_forum_topic_list($tid, $topics, $sortby, $forum_per_page) {
   $forum_theme = advanced_forum_get_forum_theme_directory();
   advanced_forum_add_css($forum_theme);  
   return _phptemplate_callback("$forum_theme/forum-topics", array('tid' => $tid, 'topics' => $topics, 'sortby' => $sortby, 'forum_per_page' => $forum_per_page));   
}

/**
 * Removes post title navigation from forum posts.
 */
function phptemplate_forum_topic_navigation($node){
  return ;
}

/**
 * Format the icon for each individual topic.
 *
 * @ingroup themeable
 */
function phptemplate_forum_icon($new_posts, $num_posts = 0, $comment_mode = 0, $sticky = 0) {
  $forum_theme = advanced_forum_get_forum_theme_directory();
  $icon_path = path_to_theme() . '/' . $forum_theme . "/images";
	
  if ($num_posts > variable_get('forum_hot_topic', 15)) {
    $icon = $new_posts ? 'hot-new' : 'hot';
  }
  else {
    $icon = $new_posts ? 'new' : 'default';
  }

  if ($comment_mode == COMMENT_NODE_READ_ONLY || $comment_mode == COMMENT_NODE_DISABLED) {
    $icon = 'closed';
  }

  if ($sticky == 1) {
    $icon = 'sticky';
  }
	
  $output = theme('image', "$icon_path/forum-$icon.png");

  if ($new_posts) {
    $output = "<a name=\"new\">$output</a>";
  }

  return $output;
}


