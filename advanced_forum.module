<?php
// $Id$

/**
 * @file
 * Enables the look and feel of other popular forum software.
 */

// DRUPAL HOOKS **************************************************************/

/**
 * Implementation of hook_perm().
 */
function advanced_forum_perm() {
  return array('administer advanced forum');
}

/**
 * Implementation of hook_menu().
 */
function advanced_forum_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'forum',
      'title' => t('Forums'),
      'callback' => 'advanced_forum_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);

      global $user;
    $items[] = array(
               'path' => "forum/markasread",
               'title' => 'Helper page to mark forums read.',
               'callback' => 'advanced_forum_markasread',
               'access' => user_access('access content') && $user->uid,
               'type' => MENU_CALLBACK,
               );
    // Add menu entry for settings page
    $items[] = array(
               'path' => "admin/settings/advanced-forum",
               'title' => t('Advanced Forum'),
               'callback' => 'drupal_get_form',
               'callback arguments' => array('advanced_forum_settings_page'),
               'access' => user_access('administer advanced forum'),
    );
  } 
  elseif(arg(2) != 'block') {
    // Avoids weird issue with block admin. See #239724
    // Should be replaced with a proper fix if one can be found.
  
    $style_directory = advanced_forum_path_to_style();
    drupal_add_css("$style_directory/advanced_forum-structure.css" );
    drupal_add_css("$style_directory/advanced_forum.css" );

    drupal_add_js(drupal_get_path('module', 'advanced_forum') . '/advanced_forum.js');
  }
  
  return $items;
}

// SETTINGS PAGE *************************************************************/

/**
 * Defines the Advanced Forum settings form.
 */
function advanced_forum_settings_page() {
  $form['advanced_forum_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Advanced forum style'),
    '#size' => 25,
    '#description' => t('Name of advanced forum style. Defaults to "naked"'),
    '#default_value' => variable_get('advanced_forum_style', 'naked'),
  );

  $form['advanced_forum_theme_all_comments'] = array(
    '#type' => 'radios',
    '#title' => t('Treat all site comments like forum comments'),
    '#options' => array(t("No"), t("Yes")),
    '#description' => t('Choosing yes causes advanced forum to consider every comment a forum comment and attempt to theme it that way. Some changes to your theme may be required.'),
    '#default_value' => variable_get('advanced_forum_theme_all_comments', 0),
  );


/*
Hidden options
variable_get('advanced_forum_show_created', TRUE)) {
variable_get('advforum_topic_pager_max', 5);
variable_get('advforum_get_new_comments', TRUE);
variable_get('advanced_forum_button_links', TRUE)
*/ 

  // Send our form to Drupal to make a settings page
  return system_settings_form($form);
}

// THEME TO PREPROCESS CONVERTER *********************************************/

/**
 * Provides D5 compatability wrapper for node/comment preprocess functions.
 */
function advanced_forum_addvars($hook, $vars) {
  _advanced_forum_load_preprocessors();
  switch ($hook) {
    case 'node':
    case 'comment':
      advanced_forum_call_preprocess($hook, $vars);
      break;
  }

  return $vars;
}

/**
 * Load advanced forum preprocessors includes on behalf of modules.
 */
function _advanced_forum_load_preprocessors() {
  static $finished = FALSE;
  if ($finished) {
    return;
  }
  
  // forum.inc is the extension on the includes such as contact.forum.inc
  advanced_forum_include('forum.inc');
}

/**
 * Load advanced forum files on behalf of modules.
 *
 * Blatent rip of views include system.
 */
function advanced_forum_include($file) {
  $includes = array();
  $cache = cache_get('advforum_includes', 'cache');
  if (isset($cache->data) && $cache->data) {
    $includes = unserialize($cache->data);
  }
  else {
    $advanced_forum_path = drupal_get_path('module', 'advanced_forum') . '/modules';
    foreach (module_list() as $module) {
      $module_path = drupal_get_path('module', $module);
      if (file_exists("$module_path/$module.$file")) {
        $includes[] = "./$module_path/$module.$file";
      }
      else if (file_exists("$module_path/includes/$module.$file")) {
        $includes[] = "./$module_path/includes/$module.$file";
      }
      else if (file_exists("$advanced_forum_path/$module.$file")) {
        $includes[] = "./$advanced_forum_path/$module.$file";
      }
    }
    cache_set('advforum_includes', 'cache', serialize($includes));
  }
  
  if (!empty($includes)) {
    foreach ($includes as $include) {
      require_once $include;
    }
  }
}

/**
 * Provides D5 compatability wrapper for forum user preprocess function.
 */
function theme_forum_user($account) {
  $variables = array();
  $variables['account'] = $account;

  // Call our preprocess function to create all the variables
  advanced_forum_call_preprocess('forum_user', $variables);
    
  // Send the variables to the advf-forum-user.tpl.php
  $forum_style = advanced_forum_get_current_style();
  return _phptemplate_callback("advf_forum_user", $variables, array("$forum_style/advf-forum-user"));
}

// Add in the D6 backports from the forum, taxonomy, and comment modules
include_once drupal_get_path('module', 'advanced_forum') .'/d6_compat.inc';

/**
 * Implementation of theme_forum_display().
 */
function phptemplate_forum_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page) {
  // Create a $variables array from the parameters
  $variables['forums'] = $forums;
  $variables['topics'] = $topics;
  $variables['parents'] = $parents;
  $variables['tid'] = $tid;
  $variables['sortby'] = $sortby;
  $variables['forum_per_page'] = $forum_per_page;
   
  // Pass the parameters into our preprocess function
  advanced_forum_call_preprocess('forums', $variables);

  // Set the template file
  $forum_style = advanced_forum_get_current_style();
  return _phptemplate_callback('advf_forums', $variables, array("$forum_style/advf-forums"));
}

/**
 * Implementation of theme_forum_list().
 */
function phptemplate_forum_list($forums, $parents, $tid) {
  // Create a $variables array from the parameters
  $variables['forums'] = $forums;
  $variables['parents'] = $parents;
  $variables['tid'] = $tid;

  // Pass the parameters into our preprocess function
  advanced_forum_call_preprocess('forum_list', $variables);
   
  // Set the template file
  $forum_style = advanced_forum_get_current_style();
  return _phptemplate_callback("advf_forum_list", $variables, array("$forum_style/advf-forum-list"));
}

/*
 * Provides D5 compatability wrapper for theme_forum_submitted.
 * Note: this function does not exist at all in D5's forum.module
 */
 
function phptemplate_forum_submitted($topic) {
  // Create a $variables array from the parameters
  $variables['topic'] = $topic;

  // Pass the parameters into our preprocess function
  advanced_forum_call_preprocess('forum_submitted', $variables);

  // Set the template file
  $forum_style = advanced_forum_get_current_style();
  return _phptemplate_callback("advf-forum-submitted", $variables, array("$forum_style/advf-forum-submitted"));
}

/**
 * Implementation of theme_forum_topic_list().
 */
function phptemplate_forum_topic_list($tid, $topics, $sortby, $forum_per_page) {
  // Create a $variables array from the parameters
  $variables['tid'] = $tid;
  $variables['topics'] = $topics;
  $variables['sortby'] = $sortby;
  $variables['forum_per_page'] = $forum_per_page;
   
  // Pass the parameters into our preprocess function
  advanced_forum_call_preprocess('forum_topic_list', $variables);
      
  // Set the template file
  $forum_style = advanced_forum_get_current_style();
  return _phptemplate_callback("advf-forum-topic-list", $variables, array("$forum_style/advf-forum-topic-list"));
}

/**
 * Implementation of theme_forum_topic_navigation
 */
function phptemplate_forum_topic_navigation($node) {
  // Removes post title navigation from forum posts.
  return ;
}

/**
 * Implementation of theme_forum_icon
 */
function phptemplate_forum_icon($new_posts, $num_posts = 0, $comment_mode = 0, $sticky = 0, $topic_id = 0) {
  // Create a $variables array from the parameters
  $variables['new_posts'] = $new_posts;
  $variables['num_posts'] = $num_posts;
  $variables['comment_mode'] = $comment_mode;
  $variables['sticky'] = $sticky;
  $variables['topic_id'] = $topic_id;
   

  // Pass the parameters into our preprocess function
  advanced_forum_call_preprocess('forum_icon', $variables);

  // Set the template file
  $forum_style = advanced_forum_get_current_style();
  return _phptemplate_callback("advf-forum-icon", $variables, array("$forum_style/advf-forum-icon"));
}

// TEMPLATE PREPROCESS *******************************************************/

/**
 * Preprocesses template variables for the node template.
 */
function advanced_forum_preprocess_node(&$vars) {
  if (advanced_forum_treat_as_forum_post('node', $vars)) {
    $forum_style = advanced_forum_get_current_style();
    
    if ($_GET['page'] > 0) { 
      // This is the repeated node on the top of subsequent pages.
      // We send this to a special .tpl so people can wipe it out or whatever
      $vars['template_files'][] = "$forum_style/advf-forum-repeat-post";
    }
    else {
      // Use our combined node/comment template file
       $vars['template_files'][] = "$forum_style/advf-forum-post";
    }

    // The node is the first post, aka topic
    $vars['top_post'] = TRUE;
    
    // Node is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;
    
    if (!empty($vars['node']->links) && !empty($vars['node']->links['comment_add'])) {
      // Change first post from "add comment" to "Reply"
      $vars['node']->links['comment_add']['title'] = t('Reply');
      $vars['links'] = theme('links', $vars['node']->links, array('class' => 'links inline forumlinks'));
      
      // Make a separate variable for the reply link so it can be put on top of the thread
      $reply_link = $vars['node']->links['comment_add'];
      $reply_link['title'] = t("Post Reply");
      $vars['reply_link'] = theme('links', array('topic_reply' => $reply_link), array('class' => 'forumlinks'));
    }

    // Make an array version of $links
    $vars['links_array'] = $vars['node']->links;
    
    // Jump to first unread comment
    $comment_count = $vars['comment_count'];
    if ($comment_count > 0) {
      $nid = $vars['node']->nid;
      $current_page = $_GET['page'];
      $number_new_comments = comment_num_new($nid);
      
      $vars['jump_first_new'] = format_plural($comment_count, '1 ' . t('reply'), '@count ' . t('replies'));
      if ($number_new_comments > 0) {
        $page_of_first_new = comment_new_page_count($comment_count, $number_new_comments, $vars['node']);   
        $cid_of_first_new = advanced_forum_first_new_comment($nid);   
        $vars['jump_first_new'].= " (" . l($number_new_comments . ' ' . t('new'), 
          'node/' . $nid, NULL, $page_of_first_new, "comment-$cid_of_first_new") .
          ")";
      }
    }
    
    // User information
    $vars['account'] = user_load(array('uid' => $vars['node']->uid));
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);   

    // TODO: This is copied from 6 but doesn't work in 5
    // Load the signature since Drupal doesn't put it on nodes
    //if (variable_get('user_signatures', 0)) {
    //  $vars['signature'] = check_markup($vars['account']->signature, $vars['node']->format);
    //}        
  }
}

/**
 * Preprocesses template variables for the comment template.
 */
function advanced_forum_preprocess_comment(&$vars) {
  if (advanced_forum_treat_as_forum_post('comment', $vars)) {
    // Use our combined node/comment template file
    // D5 won't find templates in subdirectories so we need to give it that
    $forum_style = advanced_forum_get_current_style();
    $vars['template_files'][] = "$forum_style/advf-forum-post";
    
    // Thread is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;
    
    // This is a comment, not the node.
    $vars['top_post'] = FALSE;

    // We need some information from the parent node so load it here
    $node = node_load($vars['comment']->nid);
    $vars['node'] = $node;

    // Title
    if (variable_get('comment_subject_field', 1) == 0) {
      // if comment titles are disabled, don't display it.
      $vars['title'] = '';
    } 
    else {
      // Assign the subject to the title variable for consistancy with nodes.
      $vars['title'] = check_plain($vars['comment']->subject);
    }
    
    // Just use the date for the submitted on.
    $vars['submitted'] = format_date($vars['comment']->timestamp);

    // Assign the comment to the content variable for consistancy with nodes.
    $vars['content'] = $vars['comment']->comment;
      
    // User information
    $accountid = $vars['comment']->uid;
    if ($accountid == 0) {
      // Anonymous user. Make a fake user object for theme_username
      $vars['account']->name = $vars['comment']->name;
      $vars['account']->homepage = $vars['comment']->homepage;
    }
    else {
      // Load up the real user object
      $vars['account'] = user_load(array('uid' => $vars['comment']->uid));
    }
    
    // Create the user info pane
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);   
             
    // Because the $links array isn't available here, we recreate it
    if (arg(1) != 'reply') {
      $links = module_invoke_all('link', 'comment', $vars['comment'], 1);
      foreach (module_implements('link_alter') as $module) {
        $function = $module .'_link_alter';
        $function($node, $links);
      }
      unset($links['comment_parent']);
      $vars['links'] = theme('links', $links, array('class' => 'links forumlinks'));
      $vars['links_array'] = $links;
    }
    
    // Comment number with link
    if (!isset($post_number)) {
      static $post_number = 0;
    }
    _advanced_forum_topic_nid($vars['node']->nid);

    $post_per_page = _comment_get_display_setting('comments_per_page', $vars['node']);
    $page_number = $_GET['page'];
    if (!$page_number) { 
      $page_number = 0; 
    }
    
    $post_number++;
    $fragment = 'comment-' . $vars['comment']->cid;
    $query = ($page_number) ? 'page=' . $page_number : NULL;
    $linktext = '#' . (($page_number * $post_per_page) + $post_number);
    $linkpath = 'node/' . _advanced_forum_topic_nid();
    $vars['comment_link'] = l($linktext, $linkpath, NULL, $query, $fragment);

    // Link to page created by Comment Page module, if it exists
    if (!empty($vars['comment']->page_url) && !(arg(0) == 'comment' && arg(1) == $vars['comment']->cid)) {
      $variables['page_link'] = l('(permalink)', $vars['comment']->page_url);
    }
  }
}

/**
 * Preprocesses template variables for the user info template.
 */
function template_preprocess_forum_user(&$variables) {
  // The passed in $variables['account'] refers to the user who's info is in the pane.
  $account = $variables['account'];
  $accountid = $account->uid;
  
  // Get a reference to the currently logged in user.
  global $user;
  
  // Username
  $variables['name_raw'] =  theme('username', $account);
  $variables['name'] =  '<div class="username">' .$variables['name_raw'] . '</div>';
   
  // Avatar
  $variables['picture'] = theme('user_picture', $account);

  // Nothing else applies to anon users, so just stop here
  if ($accountid == 0) {
    return;
  }
  
  // Join date / since
  $just_date = str_replace(array('H:i', 'g:ia', ' - '), '', variable_get('date_format_short', 'm/d/Y - H:i'));
  $variables['joined_raw'] = format_date($account->created, 'custom', $just_date);
  $variables['joined_raw'] = format_date($account->created, 'custom', $just_date);
  $variables['joined'] = '<div class="account-joined"><span class="user-info-label">' . t('Joined:') . ' </span>' . $variables['joined_raw'] . '</div>';

  $variables['joined_ago_raw'] = format_interval(time() - $account->created);
  $variables['joined_ago'] = '<div class="account-member-since"><span class="user-info-label">' . t('Joined:')  . ' </span>' . $variables['member_since_raw'] . 'ago </div>';
  
 // Online status
  if (round((time()-$account->access)/60) < 15) {
    $variables['online_icon'] = theme('image', advanced_forum_path_to_images() . '/status_online.png', t('User is online'), t('User is online'), NULL, TRUE);
    $variables['online_status'] = '<div class="user-online">' . $variables['online_icon'] . ' ' . t('Online') . '</div>';
  } 
  else {
    $variables['online_icon'] = theme('image', advanced_forum_path_to_images() . '/status_offline.png', t('User is offline'), t('User is offline'), NULL, TRUE);
    $variables['online_status'] = '<div class="user-offline">' . $variables['online_icon'] . ' ' . t('Offline') . '</div>';
  }
}

/**
 * Preprocesses template variables for the forum template.
 */
function advanced_forum_preprocess_forums(&$variables) {
  if (empty($variables['topics'])) {
    // We don't want the links on the top of the forum overview
    $variables['links_orig'] = $variables['links'];
    $variables['links'] = array();
  } 
  else {
    // Grab the forum description and make it available to the template file
    $forum = taxonomy_get_term($variables['tid']);
    $variables['forum_description'] = $forum->description;
  }

  // Add in the mark as read link if user has access
  if (advanced_forum_markasread_access()) {
    $tid = $variables['tid'];
    if ($tid) {
      $title = t('Mark all topics read');
      $link = "forum/markasread/$tid";
    } 
    else {
      $title = t('Mark all forums read');
      $link = "forum/markasread";
    }
    
    // To avoid translation issues, make the button version optional
    if (variable_get('advanced_forum_button_links', TRUE)) {
      $title_image = theme('image', advanced_forum_path_to_images() . '/' . 'mark-read.png');
      $variables['links']['markasread'] = array('title' => $title_image, 'href'=>$link, 'html' => TRUE);
      $variables['links_orig']['markasread'] = array('title' => $title_image, 'href'=>$link, 'html' => TRUE);
    }
    else {
      $variables['links']['markasread'] = array('title' => $title, 'href'=>$link);
      $variables['links_orig']['markasread'] = array('title' => $title, 'href'=>$link);
    }
  }
}

/**
 * Preprocesses template variables for the forum list template.
 */
function advanced_forum_preprocess_forum_list(&$variables) {

  global $user;
  
  $number_of_forums = count($forums); 
  $forum_counter = 0;

  foreach ($variables['forums'] as $id => $forum) {
    // Counter to label the rows by position
    $forum_counter++;
    switch ($forum_counter) {
      case "1":
        $position = 'first-row';
        break;
      case $number_of_forums:
        $position = 'last-row';
        break;
      default:
        $position = 'middle-row';
    }
 
    $variables['forums'][$id]->new_posts = 0;
    $variables['forums'][$id]->new_text_posts = '';
    $variables['forums'][$id]->new_url_posts = '';
    $variables['forums'][$id]->old_posts = $forum->num_posts;
    $variables['forums'][$id]->position = $position;
 
    if ($forum->is_container) {
      $current_container = $forum->tid;
      $current_container_depth = $forum->depth;
      $variables['forums'][$id]->container_id = $current_container;
    }
    else {
      if ($forum->depth > $current_container_depth ) {
        $variables['forums'][$id]->container_id = $current_container;
      }     
    }

    if ($user->uid) {
      // Show number of new posts as well as topics
      if (variable_get('advforum_get_new_comments', TRUE)) {
        // This can cause performance issues, so allow it to be turned off
        $variables['forums'][$id]->new_posts = advanced_forum_unread_posts_in_forum($forum->tid, $user->uid) + $variables['forums'][$id]->new_topics; 
      
        if ($variables['forums'][$id]->new_posts) {
          $variables['forums'][$id]->new_text_posts = format_plural($variables['forums'][$id]->new_posts, '1 new', '@count new');
          $variables['forums'][$id]->new_url_posts = url("forum/$forum->tid", array('fragment' => 'new'));
        }
      
        $variables['forums'][$id]->old_posts = $forum->num_posts - $variables['forums'][$id]->new_posts;
      }
    }
      
    // If there are new topics/posts, change the icon
    if ($forum->new_topics || $forum->new_posts) {
      $forum->icon = theme('image', advanced_forum_path_to_images() . '/forum-folder-new-posts.png');
    }
    else {
      $forum->icon = theme('image', advanced_forum_path_to_images() . '/forum-folder.png');
    }
  }  
}

/**
 * Preprocesses template variables for the submitted by/in template.
 */
function advanced_forum_preprocess_forum_submitted(&$variables) {
  if ($variables['topic']->node_title) {
    $nid = $variables['topic']->nid;

    // Make a fake node object to avoid the node load
    $node = new stdClass();
    $node->nid = $nid;
    $node->type = $variables['topic']->type;

    // Find the page of the first unread comment, if any
    $num_comments = db_result(db_query('SELECT COUNT(cid) FROM {comments} WHERE nid = %d', $nid));
    $new_replies = comment_num_new($nid);
    $query = comment_new_page_count($num_comments, $new_replies, $node);

    // Format the node title with a link
    $short_topic_title = truncate_utf8($variables['topic']->node_title, 15, TRUE, TRUE);
    $fragment = ($new_replies) ? 'new' : '';
    $variables['topic_link'] = l($short_topic_title, "node/$nid", NULL, $query, $fragment);
  }

  // For items posted more than 48 hours ago, offer an actual date.
  $timestamp = $variables['topic']->timestamp;
  if (time() - $timestamp > 172800) {
    $variables['date_posted'] = format_date($timestamp, 'small');
  }
}

/**
 * Preprocesses template variables for the topic list template.
 */
function advanced_forum_preprocess_forum_topic_list(&$variables) {
  // Redo the table header so we can add in views. 
  global $forum_topic_list_header;

  $forum_topic_list_header = array();
  $forum_topic_list_header[] = array('data' => '&nbsp;', 'class' => 'column_icon');
  $forum_topic_list_header[] = array('data' => t('Topic'), 'field' => 'n.title', 'class' => 'column_topic');
  $forum_topic_list_header[] = array('data' => t('Replies'), 'field' => 'l.comment_count', 'class' => 'column_replies');
  
  // Topic views require the statistics module so don't show if it's not enabled
  if (module_exists('statistics')) {
    $forum_topic_list_header[] =  array('data' => t('Views'), 'class' => 'column_views');
  }
  
  // Allow admins to turn off the created column
  if (variable_get('advanced_forum_show_created', TRUE)) {
    $forum_topic_list_header[] =  array('data' => t('Created'), 'field' => 'n.created', 'class' => 'column_created');
  }
  
  $forum_topic_list_header[] =  array('data' => t('Last reply'), 'field' => 'l.last_comment_timestamp', 'class' => 'column_lreply');

  // Create the tablesorting header.
  $ts = tablesort_init($forum_topic_list_header);
  $header = '';
  foreach ($forum_topic_list_header as $cell) {
    $cell = tablesort_header($cell, $forum_topic_list_header, $ts);
    $header .= _theme_table_cell($cell, TRUE);
  }
  $variables['header'] = $header;

  // Grab the forum description and make it available to the template file
  $forum = taxonomy_get_term($variables['topic_id']);
  $variables['forum_description'] = $forum->description;
  
  // Do our own topic processing.
  if (!empty($variables['topics'])) {
    $row = 0;
      
    // Find out how many pages to show on the topic pager. We do this outside
    // the loop because it will be the same for all topics.
    $max_pages_to_display = variable_get('advforum_topic_pager_max', 5);
    
    foreach ($variables['topics'] as $id => $topic) {
      // Get a pager to add to the topic, if there is one
      $variables['topics'][$id]->pager = _advanced_forum_create_topic_pager($max_pages_to_display, $topic);

      // Make shadow copy point to actual thread and tell you new the forum name
      if ($variables['topics'][$id]->moved == TRUE) {
        $term = taxonomy_get_term($topic->tid);
        $variables['topics'][$id]->message = l(t('This topic has been moved to ') . $term->name, "node/$topic->nid");
      }
      
      // Send the NID into the icon theme code so it can be linked to the topic
      $variables['topics'][$id]->icon = theme('forum_icon', $topic->new, $topic->num_comments, $topic->comment_mode, $topic->sticky, $topic->nid);
      
      // Add in the number of views
      if (module_exists('statistics')) {
        $variables['topics'][$id]->views =  _advanced_forum_get_topic_views_count($topic->nid);
      }
      
      // Set classes based on stickiness. This allows themers to seperate out
      // all the sticky posts into their own section.
      if ($topic->sticky) {
        $sticky_class = 'sticky-topic';
        $was_sticky = TRUE;
      } 
      elseif ($wassticky) {
        $sticky_class = 'first-not-sticky not-sticky';
        $was_sticky = FALSE;
      } 
      else {
        $sticky_class  = 'not-sticky';
      }
      
      $topic->sticky_class = $sticky_class;      
      
    }
  }
}

/**
 * Preprocesses template variables for the forum icon template.
 */
function advanced_forum_preprocess_forum_icon(&$variables) {
  $variables['iconpath'] = advanced_forum_path_to_images();

  return;
}


// CORE FORUM PAGE OVERRIDE **************************************************/

/**
 * Menu callback; prints a forum listing.
 *
 * This is copied from the forum module and adapted.
 */
function advanced_forum_page($tid = 0) {
  drupal_add_css(drupal_get_path('module', 'forum') .'/forum.css');
  $forum_per_page = variable_get('forum_per_page', 25);
  $sortby = variable_get('forum_order', 1);

  $forums = advanced_forum_get_forums($tid);
  $parents = taxonomy_get_parents_all($tid);
  if ($tid && !in_array($tid, variable_get('forum_containers', array()))) {
    $topics = forum_get_topics($tid, $sortby, $forum_per_page);
  }

  return theme('forum_display', $forums, $topics, $parents, $tid, $sortby, $forum_per_page);
}

/**
 * Returns a list of all forums for a given taxonomy id
 *
 * This is copied from the forum module and adapted.
 *
 * Forum objects contain the following fields
 * -num_topics Number of topics in the forum
 * -num_posts Total number of posts in all topics
 * -last_post Most recent post for the forum
 *
 * @param $tid
 *   Taxonomy ID of the vocabulary that holds the forum list.
 * @return
 *   Array of object containing the forum information.
 */
function advanced_forum_get_forums($tid = 0) {

  $forums = array();
  $_forums = taxonomy_get_tree(variable_get('forum_nav_vocabulary', ''), $tid);

  if (count($_forums)) {

    $counts = array();

    $sql = "SELECT r.tid, COUNT(n.nid) AS topic_count, SUM(l.comment_count) AS comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {term_node} r ON n.nid = r.nid WHERE n.status = 1 AND n.type = 'forum' GROUP BY r.tid";
    $sql = db_rewrite_sql($sql);
    $_counts = db_query($sql, $forum->tid);
    while ($count = db_fetch_object($_counts)) {
      $counts[$count->tid] = $count;
    }
  }

  foreach ($_forums as $forum) {
    if (in_array($forum->tid, variable_get('forum_containers', array()))) {
      $forum->container = 1;
    }

    if ($counts[$forum->tid]) {
      $forum->num_topics = $counts[$forum->tid]->topic_count;
      $forum->num_posts = $counts[$forum->tid]->topic_count + $counts[$forum->tid]->comment_count;
    }
    else {
      $forum->num_topics = 0;
      $forum->num_posts = 0;
    }

    // This query does not use full ANSI syntax since MySQL 3.x does not support
    // table1 INNER JOIN table2 INNER JOIN table3 ON table2_criteria ON table3_criteria
    // used to join node_comment_statistics to users.
    $sql = "SELECT n.nid, n.title, n.type, ncs.last_comment_timestamp, IF (ncs.last_comment_uid != 0, u2.name, ncs.last_comment_name) AS last_comment_name, ncs.last_comment_uid FROM {node} n INNER JOIN {users} u1 ON n.uid = u1.uid INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid INNER JOIN {users} u2 ON ncs.last_comment_uid=u2.uid WHERE n.status = 1 AND n.type='forum' AND tn.tid = %d ORDER BY ncs.last_comment_timestamp DESC";
    $sql = db_rewrite_sql($sql);
    $topic = db_fetch_object(db_query_range($sql, $forum->tid, 0, 1));
    $last_post = new stdClass();
    $last_post->timestamp = $topic->last_comment_timestamp;
    $last_post->name = $topic->last_comment_name;
    $last_post->uid = $topic->last_comment_uid;
    $last_post->nid = $topic->nid;
    // Note, we call it "node_title" otherwise it gets picked up on the  
    // topic list as well.
    $last_post->node_title = $topic->title;
    $last_post->type = $topic->type;
    $forum->last_post = $last_post;

    $forums[$forum->tid] = $forum;
  }

  return $forums;
}


// MARK AS READ **************************************************************/

/**
 * Marks all posts in forums or in a given forum as read by the current user.
 */
function advanced_forum_markasread() {
  global $user;

  // See if we're on a forum or on the forum overview
  // Path will be /forum/markasread or /forum/markasread/tid
  $current_forum_id = arg(2);

  if ($current_forum_id) {
    // Combine INSERT with SELECT+SUBSELECT that will return rows that are not
    // present in the history table, marking all unread nodes as read
    $sql = 'INSERT INTO {history} (uid,nid,timestamp)'
           .' SELECT %d, n.nid, %d FROM {node} AS n'
           .' INNER JOIN {term_node} AS tn ON n.nid=tn.nid'
           .' INNER JOIN {node_comment_statistics} AS ncs ON ncs.nid=n.nid'
           .' WHERE (n.created > %d OR ncs.last_comment_timestamp > %d)'
           .' AND tn.tid = %d'
           .' and n.nid not in ( SELECT nid FROM {history} AS h WHERE h.nid = n.nid AND h.uid = %d)';

    $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT, $current_forum_id, $user->uid);

    db_query($sql, $args);

    drupal_set_message(t('All content in this forum has been marked as read'));
    drupal_goto('forum/'. $current_forum_id);
  } 
  else {
    // We are on the forum overview, requesting all forums be marked read
    $forum_vocabulary_id = variable_get('forum_nav_vocabulary', '');
 
    // Combine INSERT with SELECT+SUBSELECT that will return rows that are not
    // present in the history table, marking all unread nodes as read.
    // This version adds another subselect to get all forums
    $sql = 'INSERT INTO {history} (uid,nid,timestamp)'
           .' SELECT %d, n.nid, %d FROM {node} AS n'
           .' INNER JOIN {term_node} AS tn ON n.nid=tn.nid' 
           .' INNER JOIN {node_comment_statistics} AS ncs ON ncs.nid=n.nid'
           .' WHERE (n.created > %d OR ncs.last_comment_timestamp > %d)'
           .' and n.nid not in ( SELECT nid FROM {history} AS h WHERE h.nid = n.nid AND h.uid = %d)'
           .' AND tn.tid in (SELECT tid FROM {term_data} WHERE vid = %d)';

    $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT, $user->uid, $forum_vocabulary_id);

    db_query($sql, $args);

    drupal_set_message(t('All forum content been marked as read'));
    drupal_goto('forum');
  }
}

function advanced_forum_markasread_access() {
  // This separate function is needed because the new menu system doesn't run
  // hook_menu() every time and the logged in status of the user can get cached
  // and re-used for other users.
  global $user;
  return user_access('access content') && $user->uid;
}

// STYLE UTILITY FUNCTIONS ***************************************************/

/**
 * Returns the name of the forum style to use.
 */
function advanced_forum_get_current_style() {
  return variable_get('advanced_forum_style', 'naked');
}

/**
 * Returns the full path to the advanced forum style, including the style name
 */
function advanced_forum_path_to_style() {
  static $style_path;
  
  if (!$style_path) {
    // Retrieve the style name 
    $style = advanced_forum_get_current_style();
    
    // Check first if there is a subtheme. This function is defined in Zen
    // and potentially may exist in other themes with subthemes.
    init_theme();
    if (function_exists("path_to_subtheme")) {
      $style_path = path_to_subtheme() . '/' . $style;
    }

    // If we had no luck finding the style in a subtheme, find the style path
    // the normal way.
    if (empty($style_path) || !file_exists($style_path)) {
      $style_path = path_to_theme() . '/' . $style;
    } 
  }

  return $style_path;
}

/**
 * Returns the path to the advanced forum image directory
 */
function advanced_forum_path_to_images() {
  static $image_path;
  
  if (!$image_path) {
    $image_path = advanced_forum_path_to_style() . '/images';
  }
  
  return $image_path;
}

/**
 * This function returns true if the node/comment should be themed and 
 * otherwise treated as a forum post.
 */
function advanced_forum_treat_as_forum_post($hook, $vars) {
  // Setting this static means the check only needs to be done once per page
  // as long as we haven't hit a non forum node on the page
  static $forum_node_id;
  
  switch ($hook) {
    case 'node':
      // Make sure this is a forum node type and that it's not being
      // shown on some other page (like a view or promoted to front page)
      if (($vars['node']->type == 'forum') && (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) == $vars['node']->nid|| arg(0) == 'comment')) {
        $forum_node_id = $vars['node']->nid;
        return true;
      } 
      else {
        // In D5, only forum types allowed in the forums so
        // we know this isn't a forum thread (or that it's not in the forums).
        unset($forum_node_id);
        return false;
      }
      
    case 'comment':
      if (isset($forum_node_id) && ($vars['comment']->nid == $forum_node_id)) {
        // We already know this comment is either part of a forum thread
        // or that comments on this thread are known exceptions.
        return true;
      } 
      else {
        // Not part of a forum thread. Check for exceptions.
        if (variable_get("advanced_forum_theme_all_comments", 0) == 1) {
          // This site wants all comments to use the forum comment template
          $forum_node_id = $vars['comment']->nid;
          return true;
        }

        if (arg(0) == 'comment' && is_numeric(arg(1))) {
          // Comment is being shown alone via the comment_page module
          // For now, assume those should be themed like the forums.
          // TODO: Possibly add a setting for this?
          $forum_node_id = $vars['comment']->nid;
          return true;
        }

        // Comment is not part of a forum thread and there are no exceptions.
        return false;
      }

    default:
      // We only deal with nodes and comments
      return false;
  }
}


// GENERAL UTILITY FUNCTIONS *************************************************/

/**
 * Holds the node ID of the thread we are on.
 *
 * Used for linking the comment numbers.
 *
 * @param $nid
 *   Node ID
 */
function _advanced_forum_topic_nid($nodeid = 0) {
  static $nid;

  if (!empty($nodeid)) {
    $nid = $nodeid;
  }

  return $nid;
}

/**
 * Returns the ID of the first unread comment.
 *
 * @param $nid
 *   Node ID
 * @param $timestamp
 *   Date/time used to override when the user last viewed the node.
 * @return
 *   Comment ID
 */
 function advanced_forum_first_new_comment($nid, $timestamp = 0) {
  global $user;

  if ($user->uid) {
    // Retrieve the timestamp at which the current user last viewed the
    // specified node.
    if (!$timestamp) {
      $timestamp = node_last_viewed($nid);
    }
    $timestamp = ($timestamp > NODE_NEW_LIMIT ? $timestamp : NODE_NEW_LIMIT);

    // Use the timestamp to retrieve the oldest new comment.
    $result = db_result(db_query('SELECT c.cid FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = %d AND timestamp > %d AND c.status = %d ORDER BY c.cid LIMIT 1', $nid, $timestamp, COMMENT_PUBLISHED));

    return $result;
  }
  else {
    return 0;
  }

}

/**
 * Creates a pager to place on each multi-page topic of the topic listing page.
 *
 * @param $max_pages_to_display
 *   Number of pages to include on the pager.
 * @param $topic
 *   Topic object to create a pager for.
 * @return
 *   Asembled pager.
 */
function _advanced_forum_create_topic_pager($max_pages_to_display, $topic) {
  // Find the number of comments per page for the node type of the topic.
  // It's the same for all types in D5, but varies in D6.
  $comments_per_page = _comment_get_display_setting('comments_per_page', $topic);
  
  if ($max_pages_to_display > 0 && $topic->num_comments > $comments_per_page) {
    // Topic has more than one page and a pager is wanted. Start off the
    // first page because that doesn't have a query.
    $pager_array = array();
    $current_display_page = 1;
    $pager_array[] = l('1', "node/$topic->nid");
    
    // Find the ending point. The pager URL is always 1 less than
    // the number being displayed because the first page is 0.
    $last_display_page = ceil($topic->num_comments / $comments_per_page);
    $last_pager_page = $last_display_page - 1;
    
    // Add pages until we run out or until we hit the max to show.
    while (($current_display_page < $last_display_page) && ($current_display_page < $max_pages_to_display)) {
    // Move to the next page
    $current_display_page++;
    
    // The page number we link to is 1 less than what's displayed
    $link_to_page = $current_display_page - 1;
    
    // Add the link to the array
    $pager_array[] =  l($current_display_page, "node/$topic->nid", NULL, 'page=' . $link_to_page);
    }
    
    // Move to the next page
    $current_display_page++;
    
    if ($current_display_page == $last_display_page) {
    // We are one past the max to display, but it's the last page,
    // so putting the ...last is silly. Just display it normally.
    $link_to_page = $current_display_page - 1;
    $pager_array[] =  l($current_display_page, "node/$topic->nid", NULL, 'page=' . $link_to_page);
    }

    $pager_last = '';
    if ($current_display_page < $last_display_page) {
    // We are one past the max to display and still aren't
    // on the last page, so put in ... Last Page(N)
    $text = t('Last Page') . '(' . $last_display_page . ')';
    $pager_last = ' &hellip; ' . l($text, "node/$topic->nid", NULL, 'page=' . $last_pager_page);
    }
    
    // Put it all together
   return '[' . t('Page') . ' '. implode(", ", $pager_array) . $pager_last . ']';
  }
}

/**
 * Retrieves a forum topic's "views count".
 *
 * @param $nid
 *   Node ID
 * @return
 *   Total number of times that node has been viewed.
 */
function _advanced_forum_get_topic_views_count($nid) {
  if ($nid > 0) {
    $views_count = db_result(db_query('SELECT totalcount FROM {node_counter} WHERE nid = %d', $nid));
  }

  // Make sure it's 0, not blank, for better display.
  if (empty($views_count)) {
    $views_count = 0;
  }
  return $views_count;
}

/**
 * Returns the number of unread posts in a given forum for a given user
 */
function advanced_forum_unread_posts_in_forum($tid, $uid) {
  $sql = "SELECT COUNT(c.cid) FROM {comments} c INNER JOIN {node} n INNER JOIN {term_node} tn ON c.nid = n.nid AND c.nid = tn.nid AND tn.tid = %d LEFT JOIN {history} h ON c.nid = h.nid AND h.uid = %d WHERE n.status = 1 AND n.type = 'forum' AND c.timestamp > h.timestamp";
  $sql = db_rewrite_sql($sql);
  return db_result(db_query($sql, $tid, $uid, NODE_NEW_LIMIT));
}